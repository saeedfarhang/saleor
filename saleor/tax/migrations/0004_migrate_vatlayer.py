# Generated by Django 3.2.14 on 2022-07-27 16:05

from collections import defaultdict
from django.db import migrations
from django_prices_vatlayer.models import VAT


VATLAYER_CODE_META_KEY = "vatlayer.code"
VATLAYER_ID = "mirumee.taxes.vatlayer"

BATCH_SIZE = 500


def queryset_in_batches(queryset):
    """Slice a queryset into batches.

    Input queryset should be sorted be pk.
    """
    start_pk = 0
    while True:
        qs = queryset.filter(pk__gt=start_pk)[:BATCH_SIZE]
        pks = list(qs.values_list("pk", flat=True))
        if not pks:
            break
        yield pks
        start_pk = pks[-1]


def create_tax_classes(apps, _schema_editor):
    """Create tax classes by migrating currently used Vatlayer tax codes.

    Migrate Vatlayer tax codes which are stored in metadata of products and product
    types. For each found code get or create a TaxClass instance and assign to the tax
    class.
    """

    Product = apps.get_model("product", "Product")
    ProductType = apps.get_model("product", "ProductType")
    TaxClass = apps.get_model("tax", "TaxClass")

    # TODO: clear metadata after migrating to tax class?

    product_types = (
        ProductType.objects.filter(metadata__has_key=VATLAYER_CODE_META_KEY)
        .values("id", "metadata")
        .order_by("pk")
    )
    for batch_pks in queryset_in_batches(product_types):
        tax_classes_from_product_types = defaultdict(list)
        product_types = ProductType.objects.filter(pk__in=batch_pks)
        for product_type in product_types:
            tax_class_name = product_type.metadata.get(VATLAYER_CODE_META_KEY)
            tax_classes_from_product_types[tax_class_name].append(product_type.pk)

        for name, ids in tax_classes_from_product_types.items():
            tax_class, _ = TaxClass.objects.get_or_create(name=name)
            ProductType.objects.filter(id__in=ids).update(tax_class=tax_class)

    products = (
        Product.objects.filter(metadata__has_key=VATLAYER_CODE_META_KEY)
        .values("id", "metadata")
        .order_by("pk")
    )
    tax_classes_from_products = defaultdict(list)
    for batch_pks in queryset_in_batches(product_types):
        products = Product.objects.filter(pk__in=batch_pks)
        for product in products:
            tax_class_name = product.metadata.get(VATLAYER_CODE_META_KEY)
            tax_classes_from_products[tax_class_name].append(product.pk)

        for name, ids in tax_classes_from_products.items():
            tax_class, _ = TaxClass.objects.get_or_create(name=name)
            Product.objects.filter(id__in=ids).update(tax_class=tax_class)


def create_standard_rates(apps, _schema_editor):
    TaxClass = apps.get_model("tax", "TaxClass")
    TaxClassCountryRate = apps.get_model("tax", "TaxClassCountryRate")

    tax_classes = TaxClass.objects.all()
    vat_rates = VAT.objects.all()

    tax_class_country_rates = []
    for tax_class in tax_classes:
        for vat in vat_rates:
            tax_class_country_rate = TaxClassCountryRate(
                tax_class=tax_class,
                country=vat.country_code,
                rate=vat.data["standard_rate"],
            )
            tax_class_country_rates.append(tax_class_country_rate)
    TaxClassCountryRate.objects.bulk_create(tax_class_country_rates)


def migrate_vatlayer(apps, _schema_editor):
    PluginConfiguration = apps.get_model("plugins", "PluginConfiguration")

    vatlayer_configs = PluginConfiguration.objects.filter(
        active=True, identifier=VATLAYER_ID
    )
    is_vatlayer_enabled = vatlayer_configs.exists()

    create_tax_classes(apps, _schema_editor)

    if is_vatlayer_enabled:
        create_standard_rates(apps, _schema_editor)

    # TODO: merge configs from different channels into
    # for vatlayer_config in vatlayer_configs:
    #     config_dict = {
    #         item["name"]: item["value"] for item in vatlayer_config.configuration
    #     }
    #     origin_country = config_dict["origin_country"]
    #     countries_to_calculate_taxes_from_origin = config_dict[
    #         "countries_to_calculate_taxes_from_origin"
    #     ]
    #     excluded_countries = config_dict["excluded_countries"]


class Migration(migrations.Migration):

    dependencies = [
        ("tax", "0003_add_manage_taxes_permission"),
    ]

    operations = [migrations.RunPython(migrate_vatlayer, migrations.RunPython.noop)]
